(* README
 * Author: Frank Pfenning <fp@cs.cmu.edu>
 * Modified: Anand Subramanian <asubrama@andrew.cmu.edu>
 * Modified for OCaml from SML: Michael Duggan <md5i@cs.cmu.edu>
 *)

-----------------------------------------------------------------------
Welcome to 15-411!
-----------------------------------------------------------------------

This is some starter code for the L1 compiler you have to build for
the Lab1.  It contains a lexer, parser, translator, and even a code
generator, except that the code generator creates pseudo assembly
language with fictitious instructions and an unlimited number of
registers.  We took some care to use good style (according to the
instructor); you may consider this a model for your own coding.  Feel
free to modify any and all of this code as you see fit.

Bug reports to the course staff are particularly welcome and will be
noted in the extra credit category.

-----------------------------------------------------------------------
OCaml Notes
-----------------------------------------------------------------------
This starter code assumes OCaml 3.12.  Please make sure your code
compiles under specifically the version installed on the lab machines
where it can be invoked simply with "ocaml" in a shell.

If you develop your implementation on other machines, similar versions
of SML/NJ are likely to be compatible, but you should certainly check
your code on the lab machines.

For information on the OCaml Standard Library, ocamllex, ocamlyacc,
and other sundry details, see
<URL:http://caml.inria.fr/pub/docs/manual-ocaml-4.00/index.html>.

------------------------------------------------------------------------
Source Files
------------------------------------------------------------------------
The following are the source files for the L1 compiler

README               -- this file

Makefile             -- makefile for the compiler
                        For a quick test

    % make l1c          (generates file bin/l1c)
    % bin/l1c --verbose ../tests0/return01.l1.

	                should generate ../tests0/test1.s in pseudo assembly

    % make clean        (removes generated files)

bin/l1c              -- the native executable generated by OCaml

top/            Toplevel stuff
  go            Effectively, this is main() for the program.  It just
                calls top.
  top           This is the main driver.  It calls all the other parts
                of the compiler.

parse/          lexing and parsing
  ast           abstract syntax tree for the l1 language
  l1Lexer       lexer  (ocamllex file)
  l1Parser      parser (ocamlyacc file)
  parse         code that sets up and calls the parser/lexer
  parseState    some utility code for the parser

type/           type checking
  typeChecker   basic type checker over the ast

trans/          translation to IR
  tree          data structure representing the IR tree
  trans         converts from the AST to the IR tree
  temp          generates temporary variables on the fly

codegen/        conversion to assembly
  assem         representation of assembly used by the compiler
  codegen       generates pseudo-assembly with temporaries from IR


------------------------------------------------------------------------
Debugging Hints
------------------------------------------------------------------------

"make debug" will generate a debuggable bytecode version of the
compiler named "go.d.byte".  You can run this in the OCaml debugger:

  ocamldebug go.d.byte
  set arguments ../tests0/return01.l1
  step

The debugger is a time-travelling debugger.  It allows you to step
backwards as well as forwards.  See the OCaml manual for more
information.

You can use

  - ./go.d.byte --verbose --dump-ast --dump-ir --dump-assem file.l1;

to print information from all the phases of the current compiler.

You can use

  - ./go.d.byte "--debug-parse file.l1";

to get a debug trace of the parser.

To get a state table for the parser, you can run 

  - ocamlyacc -v parse/l1Parser.mly

This will generate a "parse/l1Parser.output" file which contains
information about the parse states.  Remove the generated l1Parser.ml
and l1Parser.mli files before recompiling, as they will confuse
ocamlbuild.  (Try it and see.  It is safe.)



